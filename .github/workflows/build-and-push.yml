name: Build and Push to Azure Container Registry

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CONTAINER_PORT: 3000


jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (without recursive submodules)
        uses: actions/checkout@v4
        with:
          submodules: false  # Prevent recursive fetching
          fetch-depth: 0      # Fetch full history to avoid submodule issues

      - name: Initialize and update submodules correctly
        run: |
          git submodule update --remote --init

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract short SHA for tagging
        run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Test container name
        run: |
          # Function to sanitize the repository name
          sanitize_name() {
            local name="$1"
            # Convert to lowercase
            name="${name,,}"
            # Replace invalid characters with hyphens
            name="$(echo "$name" | sed 's/[^a-z0-9-]/-/g')"
            # Remove leading or trailing hyphens
            name="$(echo "$name" | sed 's/^-*//;s/-*$//')"
            # Ensure the name starts and ends with a lowercase letter or number
            if [[ ! "$name" =~ ^[a-z0-9] ]]; then
              name="a$name"
            fi
            if [[ ! "$name" =~ [a-z0-9]$ ]]; then
              name="${name}a"
            fi
            echo "$name"
          }

          # Extract the repository name from GITHUB_REPOSITORY
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          # Sanitize the repository name
          SANITIZED_NAME=$(sanitize_name "$REPO_NAME")
          echo "$SANITIZED_NAME"

          echo "${{ secrets.ACR_NAME }}.azurecr.io/${{ secrets.IMAGE_NAME }}${GITHUB_REPOSITORY##*/}:${{ env.IMAGE_TAG }}"

          docker login ${{ secrets.ACR_NAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}


      - name: Add container backend to Front Door
        run: |
          # Variables
          RESOURCE_GROUP="${{ secrets.ACI_RESOURCE_GROUP }}"
          FRONTDOOR_NAME="fertilitymapper"
          # Specify the backend pool name in your Front Door that should host the container backend.
          BACKEND_POOL="container-backend"
          # Construct the container's public DNS name (adjust if your region or domain is different)
          ACI_BACKEND="${SANITIZED_NAME}.westeurope.azurecontainer.io"
          
          echo "Adding container backend '$ACI_BACKEND' to Front Door '$FRONTDOOR_NAME' (pool: '$BACKEND_POOL')"

          # If the backend pool doesn't exist yet, you can create it:
          az network front-door backend-pool create \
            --resource-group "$RESOURCE_GROUP" \
            --front-door-name "$FRONTDOOR_NAME" \
            --name "$BACKEND_POOL"

          # Now add the container as a backend.
          # Here, adjust the ports as necessary. We assume HTTP on the container port (or use 80 if it listens on that port).
          az network front-door backend-pool backend add \
            --resource-group "$RESOURCE_GROUP" \
            --front-door-name "$FRONTDOOR_NAME" \
            --pool-name "$BACKEND_POOL" \
            --address "$ACI_BACKEND" \
            --http-port $CONTAINER_PORT \
            --https-port 443 \
            --priority 1 \
            --weight 50

          # (Optional) If you need to update an existing routing rule to include this backend pool, you can do so.
          # For example, to update a routing rule named 'routingRule' to forward traffic to your pool:
          az network front-door routing-rule update \
            --resource-group "$RESOURCE_GROUP" \
            --front-door-name "$FRONTDOOR_NAME" \
            --name "routingRule" \
            --forwarding-configuration backend-pool="$BACKEND_POOL"
          
          echo "Front Door '$FRONTDOOR_NAME' updated with new container backend."


      - name: Build and push Docker image
        run: |
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ secrets.IMAGE_NAME }}${GITHUB_REPOSITORY##*/}:${{ env.IMAGE_TAG }} \
            -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ secrets.IMAGE_NAME }}${GITHUB_REPOSITORY##*/}:latest \
            --push .

          az acr repository show --name ${{ secrets.ACR_NAME }} --image ${{ secrets.IMAGE_NAME }}${GITHUB_REPOSITORY##*/}:${{ env.IMAGE_TAG }}


      - name: Deploy to Azure Container Instance
        run: |
          # Function to sanitize the repository name
          sanitize_name() {
            local name="$1"
            # Convert to lowercase
            name="${name,,}"
            # Replace invalid characters with hyphens
            name="$(echo "$name" | sed 's/[^a-z0-9-]/-/g')"
            # Remove leading or trailing hyphens
            name="$(echo "$name" | sed 's/^-*//;s/-*$//')"
            # Ensure the name starts and ends with a lowercase letter or number
            if [[ ! "$name" =~ ^[a-z0-9] ]]; then
              name="a$name"
            fi
            if [[ ! "$name" =~ [a-z0-9]$ ]]; then
              name="${name}a"
            fi
            echo "$name"
          }

          # Extract the repository name from GITHUB_REPOSITORY
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          # Sanitize the repository name
          SANITIZED_NAME=$(sanitize_name "$REPO_NAME")

          az container create \
            --resource-group ${{ secrets.ACI_RESOURCE_GROUP }} \
            --name "$SANITIZED_NAME" \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/${{ secrets.IMAGE_NAME }}${GITHUB_REPOSITORY##*/}:${{ env.IMAGE_TAG }} \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --cpu 2 \
            --memory 4 \
            --os-type Linux \
            --location westeurope \
            --ports $CONTAINER_PORT \
            --dns-name-label "$SANITIZED_NAME" \
            --restart-policy Always \
            --environment-variables \
              NEXT_PUBLIC_DEBUG=1 \
              NODE_OPTIONS="--max_old_space_size=8192" \
              CALCOM_PRIVATE_API_ROUTE="https://goblin.cal.com" \
              DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              DATABASE_DIRECT_URL="${{ secrets.DATABASE_URL }}" \
              NEXT_PUBLIC_WEBAPP_URL="http://localhost:3000" \
              NEXT_PUBLIC_WEBSITE_URL="http://localhost:3000" \
              NEXT_PUBLIC_CONSOLE_URL="http://localhost:3004" \
              NEXT_PUBLIC_EMBED_LIB_URL="http://localhost:3000/embed/embed.js" \
              ALLOWED_HOSTNAMES='"cal.com","cal.dev","cal-staging.com","cal.community","cal.local:3000","localhost:3000"' \
              RESERVED_SUBDOMAINS='"app","auth","docs","design","console","go","status","api","saml","www","matrix","developer","cal","my","team","support","security","blog","learn","admin"' \
              NEXTAUTH_URL="http://localhost:3000" \
              NEXTAUTH_SECRET="/6tODEuZUbbxOecTA0xzmJGmhRa7JwKqQO5FWZsHUKc=" \
              CRON_API_KEY="0cc0e6c35519bba620c9360cfe3e68d0" \
              CALENDSO_ENCRYPTION_KEY="goaxzdDeTNf3AaGaalX3thrC/XFInn+m" \
              PLAIN_API_URL="https://api.plain.com/v1" \
              EMAIL_FROM="notifications@yourselfhostedcal.com" \
              EMAIL_FROM_NAME="Cal.com" \
              EMAIL_SERVER_HOST="localhost" \
              EMAIL_SERVER_PORT=1025 \
              NEXT_PUBLIC_FORMBRICKS_HOST_URL="https://app.formbricks.com" \
              NEXT_PUBLIC_APP_NAME="Cal.com" \
              NEXT_PUBLIC_SUPPORT_MAIL_ADDRESS="help@cal.com" \
              NEXT_PUBLIC_COMPANY_NAME="Cal.com, Inc." \
              NEXT_PUBLIC_ORGANIZATIONS_MIN_SELF_SERVE_SEATS=30 \
              NEXT_PUBLIC_ORGANIZATIONS_SELF_SERVE_PRICE=3700 \
              AB_TEST_BUCKET_PROBABILITY=50
